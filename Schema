create table public.provider (
  id integer generated by default as identity not null,
  "provider_ID" uuid not null,
  institution_code character varying null,
  "logoUrl" text null,
  name text null,
  competition_level public.competition_level_enum null default 'Unclassified'::competition_level_enum,
  course_count integer not null default 0,
  constraint provider_pkey primary key ("provider_ID"),
  constraint provider_id_key unique (id)
) TABLESPACE pg_default;

create table public.address (
  id bigint generated by default as identity not null,
  line1 text not null,
  line2 text null,
  line3 text null,
  line4 text null,
  country text null,
  region text null,
  latitude double precision null,
  longitude double precision null,
  provider_id uuid not null,
  constraint address_pkey primary key (id),
  constraint address_provider_id_key unique (provider_id),
  constraint address_provider_id_fkey foreign KEY (provider_id) references provider ("provider_ID") on delete CASCADE
) TABLESPACE pg_default;

create table public.courses (
  id uuid not null,
  "academicYear" integer not null,
  "courseTitle" text null,
  summary text null,
  provider_id uuid null,
  constraint courses_pkey primary key (id),
  constraint courses_provider_id_fkey foreign KEY (provider_id) references provider ("provider_ID")
) TABLESPACE pg_default;

create table public.options (
  id uuid not null,
  course_id uuid not null,
  location text null,
  duration text null,
  "googleMapsUrl" text null,
  "startDate" character varying null,
  "Qualification" character varying null,
  constraint options_pkey primary key (id),
  constraint options_course_id_fkey foreign KEY (course_id) references courses (id) on delete CASCADE
) TABLESPACE pg_default;

DECLARE
  target_provider_id UUID;
BEGIN
  target_provider_id := COALESCE(NEW.provider_id, OLD.provider_id);
  
  UPDATE provider
  SET course_count = (
    SELECT COUNT(*) 
    FROM courses 
    WHERE provider_id = target_provider_id
  )
  WHERE "provider_ID" = target_provider_id;
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;

DROP TRIGGER IF EXISTS course_count_trigger ON courses;
CREATE TRIGGER course_count_trigger
  AFTER INSERT OR UPDATE OR DELETE ON courses
  FOR EACH ROW 
  EXECUTE FUNCTION maintain_course_count();
